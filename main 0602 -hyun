#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <math.h>
#define EV_MAX 6
#define FLOOR_MAX 20
#define WAIT 2
#define QUE_MAX 10

#define abs(x) ((x)>0 ? (x) : -(x))   // 절댓값 많이 필요할 것 같아 추가



//pthread_t thread;
//pthread_t thread2;

//void *thread_timeflow();//시간흐름에 따른 EV상태변화
//void *thread_show(); //모든 출력제어

void print_menu();//메뉴보여주는 함수(이동,프로그램종료,시뮬레이션정지 등)
void print_EV();//EV이미지 보여주는 함수
				//void print_log();//EV log 보여주는 함수(5개정도?)
				//void choice_EV(int from,int to);//사용자 입력에  따라 EV선택,기록하는 함수

				//void gotoxy(int x,int y);

int dist(int ev_num, int from)  // input인 from층 까지의 거리를 구하는 함수
int min(int list[EV_MAX, from]);
int choice_EV(int from, int to);

int map[20][6];

int Queue[10][2];   // choice 에서 사용하는 큐와 그에 따라 필요한 전역변수들. 
int front = 0;
int rear = 1;
int deq[2];        // 코드 가독성이 떨어질 경우 struct 이용하여 코딩 변경 할 수도.


void enQue(int from, int to);
void deQue(void);
int QisEmpty(void);

struct Queue {
	int from;
	int to;
	int num;
};

struct Queue Que[QUE_MAX];

struct elevator {

	int current;
	int stop[FLOOR_MAX];
	char direction;
};

struct elevator EV[EV_MAX];

int main(void) {
	printf("start");
	int menu; //몇번 메뉴를 선택했는지
	int from, to; //EV 요청층과 목적층

	int i, j;

	int simul_work = 0;

	printf("a1");

	//초기화
	for (i = 0; i<EV_MAX; i++) {
		EV[i].current = 0;
		EV[i].direction = 'e';
		for (j = 0; j<FLOOR_MAX; j++) {
			EV[i].stop[j] = 0;
		}
	}

	printf("a2");

	// (추가함) map초기화
	for (i = 0; i<FLOOR_MAX; i++) {
		for (j = 0; j<EV_MAX; j++) {
			if (i = 0) {
				map[FLOOR_MAX][EV_MAX] = 1;//1층set
			}
			else {
				map[FLOOR_MAX][EV_MAX] = 0;//empty
			}
		}
	}

	printf("a3");


	//pthread_create(&thread2,NULL,&thread_show,NULL);

	while (menu != -1) //menu가 -1이면 프로그램 종료
	{
		printf("t1");
		print_EV();
		printf("t2");
		print_menu(from);
		printf("t3");
		scanf("%d", &menu);

		switch (menu) {
		case 1:	//시뮬레이션시작
			if (simul_work == 0) {
				//pthread_create(&thread,NULL,&thread_timeflow,NULL);
				simul_work = 1;
			}
			break;
		case 2: //시뮬레이션 정지
				//pthread_cancel(thread);
			simul_work = 0;
			break;
		case 3: //EV이동요청
			scanf("%d %d", &from, &to);
			//choice_EV(from,to);
			break;

		default: //error message
			break;
		}
	}

	//pthread_cancel(thread);
	//pthread_cancel(thread2);
	return 0;
}

void *thread_timeflow() {

};

void *thread_show() {


	int flag = 0;//flag==0인경우 EV 움직임이 없다
	int i, j;
	while (1) {
		for (i = 0; i<EV_MAX; i++) {
			for (j = 0; j<FLOOR_MAX; j++) {
				flag += EV[i].stop[j];
			}
		}

		if (flag != 0) {
			print_EV();

			print_menu(0);
			//print_menu();
			flag = 0;
		}
	}
};


void print_menu(int from) {



	//dist를 찾는다!!
	for (int i = 0; i<EV_MAX; i++) {
		printf("Elevator%d : dist = %d, ", i + 1, from - EV[i].current);
		//abs(from-EV[i].current)

		switch (EV[i].direction) {


		case 'e':
			printf("타고 있지 않습니다.\n");
			break;

		case 'u':
			printf("올라가고 있습니다.\n");
			break;

		case 'd':
			printf("내려가고 있습니다.\n");
			break;

		default:
			printf("타고 있지 않습니다.\n");
			break;
		}

	}

	printf("=================================\n");
	printf("1. 올라가기\n");
	printf("2. 내려가기\n");
	printf("3. 시뮬레이션 정지\n");
	printf("4. VIP모드\n");
	printf("5. 엘레베이터 고치기\n");
	printf("6. 종료\n");
	printf("==================================\n");

	printf("메뉴선택 : ");
}

void print_EV() {
	//char* state[EV_MAX];

	for (int i = FLOOR_MAX - 1; i >= 0; i--) { //층수표기의 혼동방지
		printf("┌---------------┐┌---------------┐┌---------------┐┌---------------┐┌---------------┐┌---------------┐\n");
		for (int j = 0; j<EV_MAX; j++) {
			if (map[i][j] == 1) {
				printf("│    %2d %2d %c    │", EV[j].current, EV[j].stop[0], EV[j].direction);
			}
			else {
				printf("│               │");
			}
		}
		printf("└---------------┘└---------------┘└---------------┘└---------------┘└---------------┘└---------------┘\n");
	}

}
/*
void gotoxy(int x, int y){
printf("\099[]%d;%df",y,x);
fflush(stdout);
}
*/


/*
void choice_EV(int from,int to){
int choice;

//...

EV[choice].stop[from]=1;
EV[choice].stop[to]=0;

}
*/


/*

main 에서 choice_EV 출력전에 항상 if QisEmpty() 해서 Empty 일 경우 choice_EV 실행
Empty아니면 deQue해서 나오는 deq[2] 값들로 choice_EV 실행.

*/
int choice_EV(int from, int to)
{
	
	int choice;
	int list[EV_MAX];

	if (flag == 0)                     //엘레베이터가 모두 멈춰있으면,
	{
		for (int i = 0; i < EV_MAx; i++)
			list[i] = 1;                     //모든 엘레베이터가 탐색대상.

		choice = min(list[6],from);
	}

	else if (to - from > 0)
	{
		for (int i = 0; i < EV_MAX; i++)
		{
			if (EV[i].direction == 'e')
				list[i] = 1;

			if (EV[i].direction == 'u')
				if (EV[i].current <= from)
					if (from < destination(i))            //destination 층과 현재층 사이에 요청층이있으면 
						list[i] = 1;

		}

		choice = min(list[6], from);		
	}

	else if (to - from < 0)
	{
		for (int i = 0; i < EV_MAX; i++)
		{
			if (EV[i].direction == 'e')
				list[i] = 1;

			if (EV[i].direction == 'd')
				if (EV[i].current >= from)
					if (from > destination(i))             //destination 층과 현재층 사이에 요청층이있으면 
						list[i] = 1;

		}

		choice = min(list[6], from);
	}



	if (choice = -= 1) // 아무것도 선택되지 않으면, 즉 , 이용가능 엘레베이터가 없으면
	{
		enQue(from,to);
	}

	else
	{
		EV[choice].stop[from] = 1;
		EV[choice].stop[to] = 1;
	}

}

int min(int list[EV_MAX,from])    //거리가 가장 최소인 엘레베이터를 찾아주는 함수
{
	int temp = 100;     // min찾는 알고리즘 사용.
	int select=-1;
	for(int i=0;i<EV_MAX;i++)
		if (list[i] == 1)        //list가 1일 때 탐색대상.
		{
			if (dist(i, from) < temp)
			{
				dist(i, from) = temp;
				select = i;
			}
		}

	return select;
}


int dist(int ev_num, int from)  // input인 from층 까지의 거리를 구하는 함수
{
	return abs(EV[ev_num].current - from);
}
/*
void direction(ev_num)
{

}

int destination(ev_num)
{

}
*/
void enQue(int from,int to)
{
	Que[rear].from = from;
	Que[rear].to = to;
	rear++;
	rear = rear % 10;

}


void deQue(void)
{
	front++;
	front = front % 10;
	deq[0] = Que[front].from;
	deq[1] = Que[front].to;
}

int QisEmpty(void)
{
	if ((rear - front) % 10 == 1)
		return 1;
	else 
		return 0;

}
